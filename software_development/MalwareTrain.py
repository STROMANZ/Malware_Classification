#!/usr/bin/python3
import os
import glob
import time
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix,accuracy_score
from MalwareModel import Classifier
import numpy as np
import tensorflow as tf
import warnings
warnings.filterwarnings("ignore")

data_dimension = 32

full_X = np.load('images_for_learning/full-features.npy'.format(data_dimension)) # Full Dataset
full_Y = np.load('images_for_learning/full-labels.npy'.format(data_dimension)) # Full Dataset Labels
train_X = np.load('images_for_learning/train-features.npy'.format(data_dimension)) # Training Dataset
train_Y = np.load('images_for_learning/train-labels.npy'.format(data_dimension)) # Training Dataset Labels
validation_X = np.load('images_for_learning/validation-features.npy'.format(data_dimension))  # Validation Dataset
validation_Y = np.load('images_for_learning/validation-labels.npy'.format(data_dimension))  # Validation Dataset Labels

full_X = full_X.reshape( ( full_X.shape[0] , data_dimension**2 ) ).astype( np.float32 )
train_X = train_X.reshape( ( train_X.shape[0] , data_dimension**2  ) ).astype( np.float32 )
validation_X = validation_X.reshape( ( validation_X.shape[0] , data_dimension**2 ) ).astype( np.float32 )

classifier = Classifier(number_of_classes=15)

parameters = {
    'batch_size' : 1000,
    'epochs' : 1000,
    'callbacks' : None,
    'val_data' : None
}

imagedir = "dataset"
cur_dir = os.getcwd()
os.chdir(imagedir)  # the parent folder with sub-folders

# Get number of samples per family
#list_fams = sorted(os.listdir(os.getcwd()), key=str.lower)
list_fams = os.listdir(os.getcwd())
no_imgs = []  # No. of samples per family
for i in range(len(list_fams)):
    os.chdir(list_fams[i])
    len1 = len(glob.glob('*.png'))
    no_imgs.append(len1)
    os.chdir('..')
num_samples = np.sum(no_imgs)

y = np.zeros(num_samples)
pos = 0
label = 0
for i in no_imgs:
    print ("Label:%2d\tFamily: %15s\tNumber of images: %d" % (label, list_fams[label], i))
    for j in range(i):
        y[pos] = label
        pos += 1
    label += 1
num_classes = label

os.chdir(cur_dir)

classifier.fit(train_X, train_Y, hyperparameters=parameters)
classifier.save_model('models/model.h5')

loss , accuracy = classifier.evaluate(validation_X , validation_Y)
print( "Loss of {}".format( loss ) , "Accuracy of {} %".format( accuracy * 100 ) )

conf_mat = np.zeros((len(list_fams),len(list_fams))) # Initializing the Confusion Matrix

validation_predict_Y = classifier.predict(validation_X)
validation_predict_Y = np.argmax(validation_predict_Y, axis=1)
validation_Y = np.argmax(validation_Y, axis=1)
cm = confusion_matrix(validation_predict_Y, validation_Y)  # Compute confusion matrix for the hold-out
conf_mat = conf_mat + cm  # Compute global confusion matrix
conf_mat = conf_mat.T  # since rows and cols are interchangeable
conf_mat_norm = conf_mat/no_imgs  # Normalizing the confusion matrix
plt.figure(3)
figure = plt.gcf()
figure.set_size_inches(18, 12)
plt.imshow(conf_mat,interpolation='nearest', cmap=plt.cm.Blues)
for row in range(len(list_fams)):
    for col in range(len(list_fams)):
        plt.annotate(int(conf_mat[row][col]),xy=(col,row),ha='center',va='center')
plt.title('Confusion matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.xticks(range(len(list_fams)),list_fams,rotation=90,fontsize=10)
plt.yticks(range(len(list_fams)),list_fams,fontsize=10)
plt.colorbar()
plt.savefig('confusion_matrix.png')
